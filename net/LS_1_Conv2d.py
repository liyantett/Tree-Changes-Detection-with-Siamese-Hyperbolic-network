#!/usr/bin/env python
# coding: utf-8

# In[10]:
import torch
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
from torch.nn.modules.utils import _pair, _quadruple


class S_Conv2d(nn.Module):

    def __init__(self, in_channels=1, out_channels=1, kernel_size=3, stride=1, padding=0, same=False):
        super(S_Conv2d, self).__init__()
        self.k = _pair(kernel_size)
        self.stride = _pair(stride)
        self.padding = _quadruple(padding)  # convert to l, r, t, b
        self.same = same
        self.conv = nn.Conv2d(in_channels, out_channels, self.k[0], padding=0, stride=self.k[0])

    def _padding(self, x):
        if self.same:
            ih, iw = x.size()[2:]
            if ih % self.stride[0] == 0:
                ph = max(self.k[0] - self.stride[0], 0)
            else:
                ph = max(self.k[0] - (ih % self.stride[0]), 0)
            if iw % self.stride[1] == 0:
                pw = max(self.k[1] - self.stride[1], 0)
            else:
                pw = max(self.k[1] - (iw % self.stride[1]), 0)
            pl = pw // 2
            pr = pw - pl
            pt = ph // 2
            pb = ph - pt
            padding = (pl, pr, pt, pb)
        else:
            padding = self.padding
        return padding

    
    def forward(self, x):
       
        x = F.pad(x, self._padding(x), mode='constant',value=0)
        x = x.unfold(2, self.k[0], self.stride[0]).unfold(3, self.k[1], self.stride[1])
        B, C, H, W, KH, KW = x.shape
        #B,KH*KW,C,H*W
        x = x.contiguous().view(B, C, H * W, KH * KW).permute(0, 3, 1, 2)
        
        #3x3
        if self.k[0]==3: 
            
            center = x[:,4,:,:]
            center = center.view(B, 1, C, H * W)
            
            x[:,0,:,:]=(1/2)*x[:,0,:,:]+(np.sqrt(2)/2-1/2)*x[:,1,:,:]+(np.sqrt(2)/2-1/2)*x[:,3,:,:]+(3/2-np.sqrt(2))*x[:,4,:,:]
            x[:,2,:,:]=(np.sqrt(2)/2-1/2)*x[:,1,:,:]+(1/2)*x[:,2,:,:]+(3/2-np.sqrt(2))*x[:,4,:,:]+(np.sqrt(2)/2-1/2)*x[:,5,:,:]
            x[:,6,:,:]=(np.sqrt(2)/2-1/2)*x[:,3,:,:]+(3/2-np.sqrt(2))*x[:,4,:,:]+(1/2)*x[:,6,:,:]+(np.sqrt(2)/2-1/2)*x[:,7,:,:]
            x[:,8,:,:]=(3/2-np.sqrt(2))*x[:,4,:,:]+(np.sqrt(2)/2-1/2)*x[:,5,:,:]+(np.sqrt(2)/2-1/2)*x[:,7,:,:]+(1/2)*x[:,8,:,:]
            
            x = x[:,torch.arange(x.size(1))!=4,:,:]
            x, indices = torch.sort(x, dim=1)
            
            x = torch.cat((x,center),1)
            x = x[:,[0,1,2,3,8,4,5,6,7],:,:]
        
        #5x5
        if self.k[0]==5:
            
            center = x[:,12,:,:]
            center = center.view(B, 1, C, H * W)
            
            temp = x.clone()
           
            x[:,6,:,:]=(1/2)*temp[:,6,:,:]+(np.sqrt(2)/2-1/2)*temp[:,7,:,:]+(np.sqrt(2)/2-1/2)*temp[:,11,:,:]+(3/2-np.sqrt(2))*temp[:,12,:,:]
            x[:,8,:,:]=(np.sqrt(2)/2-1/2)*temp[:,7,:,:]+(1/2)*temp[:,8,:,:]+(3/2-np.sqrt(2))*temp[:,12,:,:]+(np.sqrt(2)/2-1/2)*temp[:,13,:,:]
            x[:,16,:,:]=(np.sqrt(2)/2-1/2)*temp[:,11,:,:]+(3/2-np.sqrt(2))*temp[:,12,:,:]+(1/2)*temp[:,16,:,:]+(np.sqrt(2)/2-1/2)*temp[:,17,:,:]
            x[:,18,:,:]=(3/2-np.sqrt(2))*temp[:,12,:,:]+(np.sqrt(2)/2-1/2)*temp[:,13,:,:]+(np.sqrt(2)/2-1/2)*temp[:,17,:,:]+(1/2)*temp[:,18,:,:]
            
            x[:,0,:,:]=0.242641*temp[:,5,:,:]+0.171573*temp[:,0,:,:]+0.343146*temp[:,6,:,:]+0.242641*temp[:,1,:,:]         
            x[:,1,:,:]=0.11628*temp[:,6,:,:]+0.64872*temp[:,1,:,:]+0.03572*temp[:,7,:,:]+0.19928*temp[:,2,:,:]
            x[:,3,:,:]=0.496928*temp[:,2,:,:]+0.351072*temp[:,3,:,:]+0.089072*temp[:,7,:,:]+0.062928*temp[:,8,:,:]
            x[:,4,:,:]=0.242641*temp[:,3,:,:]+0.171573*temp[:,4,:,:]+0.343146*temp[:,8,:,:]+0.242641*temp[:,9,:,:]  
            x[:,9,:,:]=0.11628*temp[:,8,:,:]+0.64872*temp[:,9,:,:]+0.03572*temp[:,13,:,:]+0.19928*temp[:,14,:,:]
            x[:,19,:,:]=0.496928*temp[:,14,:,:]+0.351072*temp[:,19,:,:]+0.089072*temp[:,13,:,:]+0.062928*temp[:,18,:,:]
            x[:,24,:,:]=0.242641*temp[:,19,:,:]+0.171573*temp[:,24,:,:]+0.343146*temp[:,18,:,:]+0.242641*temp[:,23,:,:]
            x[:,23,:,:]=0.11628*temp[:,18,:,:]+0.64872*temp[:,23,:,:]+0.03572*temp[:,17,:,:]+0.19928*temp[:,22,:,:]
            x[:,21,:,:]=0.496928*temp[:,22,:,:]+0.351072*temp[:,21,:,:]+0.089072*temp[:,17,:,:]+0.062928*temp[:,16,:,:]
            x[:,20,:,:]=0.242641*temp[:,21,:,:]+0.171573*temp[:,20,:,:]+0.343146*temp[:,16,:,:]+0.242641*temp[:,15,:,:]
            x[:,15,:,:]=0.11628*temp[:,16,:,:]+0.64872*temp[:,15,:,:]+0.03572*temp[:,11,:,:]+0.19928*temp[:,10,:,:]
            x[:,5,:,:]=0.496928*temp[:,10,:,:]+0.351072*temp[:,5,:,:]+0.089072*temp[:,11,:,:]+0.062928*temp[:,6,:,:]
            
            x1 = x[:,[6,7,8,11,13,16,17,18],:,:]
            x1, indices1 = torch.sort(x1, dim=1)
            x[:,[6,7,8,11,13,16,17,18],:,:] = x1
            
            x2 = x[:,[0,1,2,3,4,5,9,10,14,15,19,20,21,22,23,24],:,:]
            x2, indices2 = torch.sort(x2, dim=1)
            x[:,[0,1,2,3,4,5,9,10,14,15,19,20,21,22,23,24],:,:] = x2
            
            x = torch.cat((x1,x2,center),1)
            x = x[:,[8,9,10,11,12,13,0,1,2,14,15,3,24,4,16,17,5,6,7,18,19,20,21,22,23],:,:]
            
        #7x7
        if self.k[0]==7:
            
            center = x[:,24,:,:]
            center = center.view(B, 1, C, H * W)
            
            temp = x.clone()
           
            x[:,16,:,:]=(1/2)*temp[:,16,:,:]+(np.sqrt(2)/2-1/2)*temp[:,17,:,:]+(np.sqrt(2)/2-1/2)*temp[:,23,:,:]+(3/2-np.sqrt(2))*temp[:,24,:,:]
            x[:,18,:,:]=(np.sqrt(2)/2-1/2)*temp[:,17,:,:]+(1/2)*temp[:,18,:,:]+(3/2-np.sqrt(2))*temp[:,24,:,:]+(np.sqrt(2)/2-1/2)*temp[:,25,:,:]
            x[:,30,:,:]=(np.sqrt(2)/2-1/2)*temp[:,23,:,:]+(3/2-np.sqrt(2))*temp[:,24,:,:]+(1/2)*temp[:,30,:,:]+(np.sqrt(2)/2-1/2)*temp[:,31,:,:]
            x[:,32,:,:]=(3/2-np.sqrt(2))*temp[:,24,:,:]+(np.sqrt(2)/2-1/2)*temp[:,25,:,:]+(np.sqrt(2)/2-1/2)*temp[:,31,:,:]+(1/2)*temp[:,32,:,:]
            
            x[:,8,:,:]=0.242641*temp[:,15,:,:]+0.171573*temp[:,8,:,:]+0.343146*temp[:,16,:,:]+0.242641*temp[:,9,:,:]         
            x[:,9,:,:]=0.11628*temp[:,16,:,:]+0.64872*temp[:,9,:,:]+0.03572*temp[:,17,:,:]+0.19928*temp[:,10,:,:]
            x[:,11,:,:]=0.496928*temp[:,10,:,:]+0.351072*temp[:,11,:,:]+0.089072*temp[:,17,:,:]+0.062928*temp[:,18,:,:]
            x[:,12,:,:]=0.242641*temp[:,11,:,:]+0.171573*temp[:,12,:,:]+0.343146*temp[:,18,:,:]+0.242641*temp[:,19,:,:]  
            x[:,19,:,:]=0.11628*temp[:,18,:,:]+0.64872*temp[:,19,:,:]+0.03572*temp[:,25,:,:]+0.19928*temp[:,26,:,:]
            x[:,33,:,:]=0.496928*temp[:,26,:,:]+0.351072*temp[:,33,:,:]+0.089072*temp[:,25,:,:]+0.062928*temp[:,32,:,:]
            x[:,40,:,:]=0.242641*temp[:,33,:,:]+0.171573*temp[:,40,:,:]+0.343146*temp[:,32,:,:]+0.242641*temp[:,39,:,:]
            x[:,39,:,:]=0.11628*temp[:,32,:,:]+0.64872*temp[:,39,:,:]+0.03572*temp[:,31,:,:]+0.19928*temp[:,38,:,:]
            x[:,37,:,:]=0.496928*temp[:,38,:,:]+0.351072*temp[:,37,:,:]+0.089072*temp[:,31,:,:]+0.062928*temp[:,30,:,:]
            x[:,36,:,:]=0.242641*temp[:,37,:,:]+0.171573*temp[:,36,:,:]+0.343146*temp[:,30,:,:]+0.242641*temp[:,29,:,:]
            x[:,29,:,:]=0.11628*temp[:,30,:,:]+0.64872*temp[:,29,:,:]+0.03572*temp[:,23,:,:]+0.19928*temp[:,22,:,:]
            x[:,15,:,:]=0.496928*temp[:,22,:,:]+0.351072*temp[:,15,:,:]+0.089072*temp[:,23,:,:]+0.062928*temp[:,16,:,:]
            
            x[:,0,:,:]=0.106602*temp[:,0,:,:]+0.014719*temp[:,1,:,:]+0.7720780*temp[:,7,:,:]+0.106602*temp[:,8,:,:]
            x[:,6,:,:]=0.7720780*temp[:,5,:,:]+0.106602*temp[:,6,:,:]+0.106602*temp[:,12,:,:]+0.014719*temp[:,13,:,:]
            x[:,42,:,:]=0.014719*temp[:,35,:,:]+0.106602*temp[:,36,:,:]+0.106602*temp[:,42,:,:]+0.7720780*temp[:,43,:,:]
            x[:,48,:,:]=0.106602*temp[:,40,:,:]+0.7720780*temp[:,41,:,:]+0.014719*temp[:,47,:,:]+0.106602*temp[:,48,:,:]
            
            x[:,1,:,:]=0.299038*temp[:,1,:,:]+0.299038*temp[:,2,:,:]+0.200962*temp[:,8,:,:]+0.200962*temp[:,9,:,:]
            x[:,13,:,:]=0.200962*temp[:,12,:,:]+0.299038*temp[:,13,:,:]+0.200962*temp[:,19,:,:]+0.299038*temp[:,20,:,:]
            x[:,47,:,:]=0.200962*temp[:,39,:,:]+0.200962*temp[:,40,:,:]+0.299038*temp[:,46,:,:]+0.299038*temp[:,47,:,:]
            x[:,35,:,:]=0.299038*temp[:,28,:,:]+0.200962*temp[:,29,:,:]+0.299038*temp[:,35,:,:]+0.200962*temp[:,36,:,:]
            
            x[:,2,:,:]=0.697086*temp[:,2,:,:]+0.200692*temp[:,3,:,:]+0.079371*temp[:,9,:,:]+0.022851*temp[:,10,:,:]
            x[:,20,:,:]=0.079371*temp[:,19,:,:]+0.697086*temp[:,20,:,:]+0.022851*temp[:,26,:,:]+0.200692*temp[:,27,:,:]
            x[:,46,:,:]=0.022851*temp[:,38,:,:]+0.079371*temp[:,39,:,:]+0.200692*temp[:,45,:,:]+0.697086*temp[:,46,:,:]
            x[:,28,:,:]=0.200692*temp[:,21,:,:]+0.022851*temp[:,22,:,:]+0.697086*temp[:,28,:,:]+0.079371*temp[:,29,:,:]
                
            x[:,4,:,:]=0.200692*temp[:,3,:,:]+0.697086*temp[:,4,:,:]+0.022851*temp[:,10,:,:]+0.079371*temp[:,11,:,:]
            x[:,34,:,:]=0.022851*temp[:,26,:,:]+0.200692*temp[:,27,:,:]+0.079371*temp[:,33,:,:]+0.697086*temp[:,34,:,:]
            x[:,44,:,:]=0.079371*temp[:,37,:,:]+0.022851*temp[:,38,:,:]+0.697086*temp[:,44,:,:]+0.200692*temp[:,45,:,:]
            x[:,14,:,:]=0.697086*temp[:,14,:,:]+0.079371*temp[:,15,:,:]+0.200692*temp[:,21,:,:]+0.022851*temp[:,22,:,:]
            
            x[:,5,:,:]=0.299038*temp[:,4,:,:]+0.299038*temp[:,5,:,:]+0.200962*temp[:,11,:,:]+0.200962*temp[:,12,:,:]
            x[:,7,:,:]=0.299038*temp[:,7,:,:]+0.200962*temp[:,8,:,:]+0.299038*temp[:,14,:,:]+0.200962*temp[:,15,:,:]
            x[:,41,:,:]=0.200962*temp[:,33,:,:]+0.299038*temp[:,34,:,:]+0.200962*temp[:,40,:,:]+0.299038*temp[:,41,:,:]
            x[:,43,:,:]=0.200962*temp[:,36,:,:]+0.200962*temp[:,37,:,:]+0.299038*temp[:,43,:,:]+0.299038*temp[:,44,:,:]
           
             
            x1 = x[:,[16,17,18,23,25,30,31,32],:,:]
            x1, indices1 = torch.sort(x1, dim=1)
            x[:,[16,17,18,23,25,30,31,32],:,:] = x1
            
            x2 = x[:,[8,9,10,11,12,15,19,22,26,29,33,36,37,38,39,40],:,:]
            x2, indices2 = torch.sort(x2, dim=1)
            x[:,[8,9,10,11,12,15,19,22,26,29,33,36,37,38,39,40],:,:] = x2
            
            x3 = x[:,[0,1,2,3,4,5,6,7,13,14,20,21,27,28,34,35,41,42,43,44,45,46,47,48],:,:]
            x3, indices3 = torch.sort(x3, dim=1)
            x[:,[0,1,2,3,4,5,6,7,13,14,20,21,27,28,34,35,41,42,43,44,45,46,47,48],:,:] = x3
                        
            x = torch.cat((x1,x2,x3,center),1)
            x = x[:,[24,25,26,27,28,29,30,31,8,9,10,11,12,32,33,13,0,1,2,14,34,35,15,3,48,4,16,36,37,17,5,6,7,18,38,39,19,20,21,22,23,40,41,42,43,44,45,46,47],:,:]
                                          
        x = x.contiguous().view(B, KH, KW, C, H, W)
        x = x.permute(0, 3, 4, 1, 5, 2).contiguous().view(B, C, KH *H, KW * W)
        x = self.conv(x)
        
        return x